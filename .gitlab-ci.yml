# Copyright 2025 ETH Zurich and University of Bologna.
# Licensed under the Apache License, Version 2.0, see LICENSE.apache for details.
# SPDX-License-Identifier: Apache-2.0
#
# Sergio Mazzola <smazzola@iis.ee.ethz.ch>

variables:
  # Tooling
  BENDER: bender
  QUESTA: questa-2022.3
  GCC_DIR: /usr/pack/riscv-1.0-kgf
  # CI settings
  GIT_STRATEGY: "clone"
  GIT_CLEAN_FLAGS: "-ffd"
  CI_DEBUG_TRACE: "false"
  # Enable colors in CI terminal
  TERM: ansi
  FORCE_COLOR: 1

.default:
  before_script:
    # Export RISC-V GCC toolchain paths
    - export PATH="${GCC_DIR}/default/bin:${GCC_DIR}/STARTUP:${PATH}"
  artifacts:
    when: always
    expire_in: 3 days

stages:
  - build
  - test

#########
# Build #
#########

# Configure hardware parameterizations
.hw_config: &hw_config
  HW_CFG_DEFS_TARGS:
    - "-t wl_scm"
    - "-t wl_sram"

# Compile hardware sources
build-hw-vsim:
  extends: .default
  stage: build
  script:
    - make checkout
    - make snitch_bootrom
    - make compile-vsim
  artifacts:
    paths: [ ".bender", "hw", "target/sim/vsim", "sw/bootrom" ]
    name: "$CI_JOB_NAME"
  parallel:
    matrix:
      - <<: *hw_config

# Build testbenches
.build-tb-vsim-template: &build-tb-vsim-template
  extends: .default
  stage: build
  needs:
    - job: build-hw-vsim
      artifacts: true
      parallel:
        matrix: 
          - <<: *hw_config
  script:
    - sim_top_level=$TB_TOP make opt-vsim
  artifacts:
    paths: [ ".bender", "hw", "target/sim/vsim", "sw/bootrom" ]
    name: "$CI_JOB_NAME"

# Select the testbench (as found in `./test`) to build on top of each hardware configuration
build-tb-vsim:
  <<: *build-tb-vsim-template
  parallel:
    matrix:
      # For now all hw configurations use the same testbench
      - <<: *hw_config
        TB_TOP: tb_wl_top

########
# Test #
########

# Template to compile and run software tests
.test-template: &test-template
  extends: .default
  stage: test
  script:
    - echo "Running application \"$TEST\" on testbench \"$TB_TOP\" with hw config \"$HW_CFG_DEFS\""
    - make sw/apps/$TEST.dump
    - make sw/apps/$TEST.{instr,data}_mem.bin
    - GUI=0 APP=$TEST sim_top_level=$TB_TOP make run-vsim
    - utils/vsim_ret.sh target/sim/vsim/transcript
  artifacts:
    paths: [ "hw", "sw", "target/sim/vsim" ]
    exclude: [ "target/sim/vsim/work/**/*", "target/sim/vsim/work", "target/sim/vsim/*.wlf" ]
    expire_in: 1 week

# Tests to run on `tb_wl_top`
tb_wl_top-vsim:
  <<: *test-template
  needs:
  - job: build-tb-vsim
    artifacts: true
    parallel:
      matrix:
      - <<: *hw_config
        TB_TOP: tb_wl_top
  parallel:
    matrix:
      # Tests to run on `tb_wl_top` on all hardware configurations
      - TEST: 
          - test_data_mem
          - test_data_mem_load_subword
          - test_data_mem_store_subword
          - test_hwpe_datamover
          - test_axi_lite_master
        <<: *hw_config
        TB_TOP: tb_wl_top
